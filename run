#!/bin/bash

# Set default log level
export LOG_LEVEL=0 # Default log level is 0
export LOG_LEVEL=2 # here for testing

if [ $# == 1 ]; then           # One command line argument
  if [ $1 == "install" ]; then # Install
    echo "Installing required packages..."
    npm install typescript # Ensures npx tsc works
    npm install            # Install packages in userland
    echo "Installed required packages"

  elif [ $1 == "test" ]; then # Test
    echo "Current log level is $LOG_LEVEL"
    echo "You chose test"

    # Run the test suite and capture output
    TEST_OUTPUT=$(npm test -- --coverage --silent 2>&1)

    # Debugging: Print relevant parts of test output
    echo "$TEST_OUTPUT" | grep "Test Suites:"
    echo "$TEST_OUTPUT" | grep "Tests:"
    echo "$TEST_OUTPUT" | grep "All files"

    # Extract total and passed tests using sed and awk
    TOTAL_TESTS=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {print $2}')
    PASSED_TESTS=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {print $4}')

    # Extract coverage percentage
    COVERAGE=$(echo "$TEST_OUTPUT" | sed -n 's/.*All files *| *\([0-9]\+\.[0-9]\+\) *|.*/\1/p')

    # Provide fallback values in case of parsing issues
    TOTAL_TESTS=${TOTAL_TESTS:-0}
    PASSED_TESTS=${PASSED_TESTS:-0}
    COVERAGE=${COVERAGE:-0}

    # Display the results in the desired format
    echo "Total: $TOTAL_TESTS"
    echo "Passed: $PASSED_TESTS"
    echo "Coverage: $COVERAGE%"
    echo "$PASSED_TESTS/$TOTAL_TESTS test cases passed. $COVERAGE% line coverage achieved."

    # Check if the tests passed
    if [ "$TOTAL_TESTS" -eq 0 ] || [ "$PASSED_TESTS" -ne "$TOTAL_TESTS" ]; then
      echo "Test suite failed! Check the logs for details."
      exit 1
    fi



  else                    # URL_FILE
    npx tsc               # Compile TypeScript files to JavaScript
    if [ $? -ne 0 ]; then # If compilation fails, exit
      echo "TypeScript compilation failed. Exiting..."
      exit 1
    fi
    # Can't echo anything here or syntax checker fails
    node src/main.js $1
  fi

else # Not one command line argument
  echo "Invalid number of command line arguments"
fi

